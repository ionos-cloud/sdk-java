/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiCallback;
import com.ionoscloud.ApiClient;
import com.ionoscloud.ApiException;
import com.ionoscloud.ApiResponse;
import com.ionoscloud.Configuration;
import com.ionoscloud.Pair;
import com.ionoscloud.ProgressRequestBody;
import com.ionoscloud.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ionoscloud.model.BalancedNics;
import com.ionoscloud.model.Error;
import com.ionoscloud.model.Loadbalancer;
import com.ionoscloud.model.LoadbalancerProperties;
import com.ionoscloud.model.Loadbalancers;
import com.ionoscloud.model.Nic;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoadBalancerApi {
    private ApiClient localVarApiClient;

    public LoadBalancerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoadBalancerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for datacentersLoadbalancersBalancednicsDelete
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param nicId The unique ID of the NIC (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersBalancednicsDeleteCall(String datacenterId, String loadbalancerId, String nicId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}/balancednics/{nicId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "loadbalancerId" + "\\}", localVarApiClient.escapeString(loadbalancerId.toString()))
            .replaceAll("\\{" + "nicId" + "\\}", localVarApiClient.escapeString(nicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersLoadbalancersBalancednicsDeleteValidateBeforeCall(String datacenterId, String loadbalancerId, String nicId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersLoadbalancersBalancednicsDelete(Async)");
        }
        
        // verify the required parameter 'loadbalancerId' is set
        if (loadbalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadbalancerId' when calling datacentersLoadbalancersBalancednicsDelete(Async)");
        }
        
        // verify the required parameter 'nicId' is set
        if (nicId == null) {
            throw new ApiException("Missing the required parameter 'nicId' when calling datacentersLoadbalancersBalancednicsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersLoadbalancersBalancednicsDeleteCall(datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Detach a nic from loadbalancer
     * This will remove a nic from Load Balancer
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param nicId The unique ID of the NIC (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public Object datacentersLoadbalancersBalancednicsDelete(String datacenterId, String loadbalancerId, String nicId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<Object> localVarResp = datacentersLoadbalancersBalancednicsDeleteWithHttpInfo(datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Detach a nic from loadbalancer
     * This will remove a nic from Load Balancer
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param nicId The unique ID of the NIC (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> datacentersLoadbalancersBalancednicsDeleteWithHttpInfo(String datacenterId, String loadbalancerId, String nicId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersLoadbalancersBalancednicsDeleteValidateBeforeCall(datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detach a nic from loadbalancer (asynchronously)
     * This will remove a nic from Load Balancer
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param nicId The unique ID of the NIC (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersBalancednicsDeleteAsync(String datacenterId, String loadbalancerId, String nicId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Object> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersLoadbalancersBalancednicsDeleteValidateBeforeCall(datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersLoadbalancersBalancednicsFindByNicId
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param nicId The unique ID of the NIC (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersBalancednicsFindByNicIdCall(String datacenterId, String loadbalancerId, String nicId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}/balancednics/{nicId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "loadbalancerId" + "\\}", localVarApiClient.escapeString(loadbalancerId.toString()))
            .replaceAll("\\{" + "nicId" + "\\}", localVarApiClient.escapeString(nicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersLoadbalancersBalancednicsFindByNicIdValidateBeforeCall(String datacenterId, String loadbalancerId, String nicId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersLoadbalancersBalancednicsFindByNicId(Async)");
        }
        
        // verify the required parameter 'loadbalancerId' is set
        if (loadbalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadbalancerId' when calling datacentersLoadbalancersBalancednicsFindByNicId(Async)");
        }
        
        // verify the required parameter 'nicId' is set
        if (nicId == null) {
            throw new ApiException("Missing the required parameter 'nicId' when calling datacentersLoadbalancersBalancednicsFindByNicId(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersLoadbalancersBalancednicsFindByNicIdCall(datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Retrieve a nic attached to Load Balancer
     * This will retrieve the properties of an attached nic.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param nicId The unique ID of the NIC (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return Nic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public Nic datacentersLoadbalancersBalancednicsFindByNicId(String datacenterId, String loadbalancerId, String nicId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<Nic> localVarResp = datacentersLoadbalancersBalancednicsFindByNicIdWithHttpInfo(datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Retrieve a nic attached to Load Balancer
     * This will retrieve the properties of an attached nic.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param nicId The unique ID of the NIC (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return ApiResponse&lt;Nic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Nic> datacentersLoadbalancersBalancednicsFindByNicIdWithHttpInfo(String datacenterId, String loadbalancerId, String nicId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersLoadbalancersBalancednicsFindByNicIdValidateBeforeCall(datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<Nic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a nic attached to Load Balancer (asynchronously)
     * This will retrieve the properties of an attached nic.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param nicId The unique ID of the NIC (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersBalancednicsFindByNicIdAsync(String datacenterId, String loadbalancerId, String nicId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Nic> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersLoadbalancersBalancednicsFindByNicIdValidateBeforeCall(datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<Nic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersLoadbalancersBalancednicsGet
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param offset the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination) (optional, default to 0)
     * @param limit the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination) (optional, default to 1000)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersBalancednicsGetCall(String datacenterId, String loadbalancerId, Boolean pretty, Integer depth, Integer xContractNumber, Integer offset, Integer limit,  String orderBy, Integer maxResults, Map<String, String> filters,final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}/balancednics"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "loadbalancerId" + "\\}", localVarApiClient.escapeString(loadbalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }
        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }
        if (filters != null) {
            filters.forEach((key, value) -> {
                localVarQueryParams.add(new Pair(String.format("filter.%s", key), value));
            });
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersLoadbalancersBalancednicsGetValidateBeforeCall(String datacenterId, String loadbalancerId, Boolean pretty, Integer depth, Integer xContractNumber, Integer offset, Integer limit,  String orderBy, Integer maxResults , Map<String, String> filters,final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersLoadbalancersBalancednicsGet(Async)");
        }
        
        // verify the required parameter 'loadbalancerId' is set
        if (loadbalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadbalancerId' when calling datacentersLoadbalancersBalancednicsGet(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersLoadbalancersBalancednicsGetCall(datacenterId, loadbalancerId, pretty, depth, xContractNumber, offset, limit,  orderBy, maxResults, filters,callback);
        return localVarCall;

    }

    /**
     * List Load Balancer Members 
     * You can retrieve a list of nics attached to a Load Balancer
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param offset the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination) (optional, default to 0)
     * @param limit the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination) (optional, default to 1000)
     * @param orderBy - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param maxResults - Limits the number of results returned.
     * @param filters - Filters query parameters limit results to those containing a matching value for a specific property.
     * @return BalancedNics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public BalancedNics datacentersLoadbalancersBalancednicsGet(String datacenterId, String loadbalancerId, Boolean pretty, Integer depth, Integer xContractNumber, Integer offset, Integer limit,  String orderBy, Integer maxResults, Map<String, String> filters) throws ApiException {
        ApiResponse<BalancedNics> localVarResp = datacentersLoadbalancersBalancednicsGetWithHttpInfo(datacenterId, loadbalancerId, pretty, depth, xContractNumber, offset, limit, orderBy, maxResults, filters);
        return localVarResp.getData();
    }

    /**
     * List Load Balancer Members 
     * You can retrieve a list of nics attached to a Load Balancer
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param offset the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination) (optional, default to 0)
     * @param limit the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination) (optional, default to 1000)
     * @param orderBy - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param maxResults - Limits the number of results returned.
     * @param filters - Filters query parameters limit results to those containing a matching value for a specific property.
     * @return ApiResponse&lt;BalancedNics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalancedNics> datacentersLoadbalancersBalancednicsGetWithHttpInfo(String datacenterId, String loadbalancerId, Boolean pretty, Integer depth, Integer xContractNumber, Integer offset, Integer limit, String orderBy, Integer maxResults, Map<String, String> filters) throws ApiException {
        okhttp3.Call localVarCall = datacentersLoadbalancersBalancednicsGetValidateBeforeCall(datacenterId, loadbalancerId, pretty, depth, xContractNumber, offset, limit,  orderBy, maxResults, filters, null);
        Type localVarReturnType = new TypeToken<BalancedNics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Load Balancer Members  (asynchronously)
     * You can retrieve a list of nics attached to a Load Balancer
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param offset the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination) (optional, default to 0)
     * @param limit the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination) (optional, default to 1000)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersBalancednicsGetAsync(String datacenterId, String loadbalancerId, Boolean pretty, Integer depth, Integer xContractNumber, Integer offset, Integer limit, String orderBy, Integer maxResults, Map<String, String> filters,final ApiCallback<BalancedNics> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersLoadbalancersBalancednicsGetValidateBeforeCall(datacenterId, loadbalancerId, pretty, depth, xContractNumber, offset, limit,  orderBy, maxResults, filters, callback);
        Type localVarReturnType = new TypeToken<BalancedNics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersLoadbalancersBalancednicsPost
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param nic Nic id to be attached (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersBalancednicsPostCall(String datacenterId, String loadbalancerId, Nic nic, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = nic;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}/balancednics"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "loadbalancerId" + "\\}", localVarApiClient.escapeString(loadbalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersLoadbalancersBalancednicsPostValidateBeforeCall(String datacenterId, String loadbalancerId, Nic nic, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersLoadbalancersBalancednicsPost(Async)");
        }
        
        // verify the required parameter 'loadbalancerId' is set
        if (loadbalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadbalancerId' when calling datacentersLoadbalancersBalancednicsPost(Async)");
        }
        
        // verify the required parameter 'nic' is set
        if (nic == null) {
            throw new ApiException("Missing the required parameter 'nic' when calling datacentersLoadbalancersBalancednicsPost(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersLoadbalancersBalancednicsPostCall(datacenterId, loadbalancerId, nic, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Attach a nic to Load Balancer
     * This will attach a pre-existing nic to a Load Balancer. 
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param nic Nic id to be attached (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return Nic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public Nic datacentersLoadbalancersBalancednicsPost(String datacenterId, String loadbalancerId, Nic nic, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<Nic> localVarResp = datacentersLoadbalancersBalancednicsPostWithHttpInfo(datacenterId, loadbalancerId, nic, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Attach a nic to Load Balancer
     * This will attach a pre-existing nic to a Load Balancer. 
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param nic Nic id to be attached (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return ApiResponse&lt;Nic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Nic> datacentersLoadbalancersBalancednicsPostWithHttpInfo(String datacenterId, String loadbalancerId, Nic nic, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersLoadbalancersBalancednicsPostValidateBeforeCall(datacenterId, loadbalancerId, nic, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<Nic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Attach a nic to Load Balancer (asynchronously)
     * This will attach a pre-existing nic to a Load Balancer. 
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param nic Nic id to be attached (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersBalancednicsPostAsync(String datacenterId, String loadbalancerId, Nic nic, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Nic> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersLoadbalancersBalancednicsPostValidateBeforeCall(datacenterId, loadbalancerId, nic, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<Nic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersLoadbalancersDelete
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersDeleteCall(String datacenterId, String loadbalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "loadbalancerId" + "\\}", localVarApiClient.escapeString(loadbalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersLoadbalancersDeleteValidateBeforeCall(String datacenterId, String loadbalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersLoadbalancersDelete(Async)");
        }
        
        // verify the required parameter 'loadbalancerId' is set
        if (loadbalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadbalancerId' when calling datacentersLoadbalancersDelete(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersLoadbalancersDeleteCall(datacenterId, loadbalancerId, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Delete a Loadbalancer.
     * Removes the specific Loadbalancer
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public Object datacentersLoadbalancersDelete(String datacenterId, String loadbalancerId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<Object> localVarResp = datacentersLoadbalancersDeleteWithHttpInfo(datacenterId, loadbalancerId, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Delete a Loadbalancer.
     * Removes the specific Loadbalancer
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> datacentersLoadbalancersDeleteWithHttpInfo(String datacenterId, String loadbalancerId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersLoadbalancersDeleteValidateBeforeCall(datacenterId, loadbalancerId, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Loadbalancer. (asynchronously)
     * Removes the specific Loadbalancer
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersDeleteAsync(String datacenterId, String loadbalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Object> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersLoadbalancersDeleteValidateBeforeCall(datacenterId, loadbalancerId, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersLoadbalancersFindById
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersFindByIdCall(String datacenterId, String loadbalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "loadbalancerId" + "\\}", localVarApiClient.escapeString(loadbalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersLoadbalancersFindByIdValidateBeforeCall(String datacenterId, String loadbalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersLoadbalancersFindById(Async)");
        }
        
        // verify the required parameter 'loadbalancerId' is set
        if (loadbalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadbalancerId' when calling datacentersLoadbalancersFindById(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersLoadbalancersFindByIdCall(datacenterId, loadbalancerId, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Retrieve a loadbalancer
     * Retrieves the attributes of a given Loadbalancer
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return Loadbalancer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public Loadbalancer datacentersLoadbalancersFindById(String datacenterId, String loadbalancerId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<Loadbalancer> localVarResp = datacentersLoadbalancersFindByIdWithHttpInfo(datacenterId, loadbalancerId, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Retrieve a loadbalancer
     * Retrieves the attributes of a given Loadbalancer
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return ApiResponse&lt;Loadbalancer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Loadbalancer> datacentersLoadbalancersFindByIdWithHttpInfo(String datacenterId, String loadbalancerId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersLoadbalancersFindByIdValidateBeforeCall(datacenterId, loadbalancerId, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<Loadbalancer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a loadbalancer (asynchronously)
     * Retrieves the attributes of a given Loadbalancer
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersFindByIdAsync(String datacenterId, String loadbalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Loadbalancer> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersLoadbalancersFindByIdValidateBeforeCall(datacenterId, loadbalancerId, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<Loadbalancer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersLoadbalancersGet
     * @param datacenterId The unique ID of the datacenter (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param offset the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination) (optional, default to 0)
     * @param limit the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination) (optional, default to 1000)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersGetCall(String datacenterId, Boolean pretty, Integer depth, Integer xContractNumber, Integer offset, Integer limit,  String orderBy, Integer maxResults, Map<String, String> filters,final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/loadbalancers"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }
        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }
        if (filters != null) {
            filters.forEach((key, value) -> {
                localVarQueryParams.add(new Pair(String.format("filter.%s", key), value));
            });
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersLoadbalancersGetValidateBeforeCall(String datacenterId, Boolean pretty, Integer depth, Integer xContractNumber, Integer offset, Integer limit,  String orderBy, Integer maxResults , Map<String, String> filters,final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersLoadbalancersGet(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersLoadbalancersGetCall(datacenterId, pretty, depth, xContractNumber, offset, limit,  orderBy, maxResults, filters,callback);
        return localVarCall;

    }

    /**
     * List Load Balancers
     * Retrieve a list of Load Balancers within the datacenter
     * @param datacenterId The unique ID of the datacenter (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param offset the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination) (optional, default to 0)
     * @param limit the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination) (optional, default to 1000)
     * @param orderBy - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param maxResults - Limits the number of results returned.
     * @param filters - Filters query parameters limit results to those containing a matching value for a specific property.
     * @return Loadbalancers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public Loadbalancers datacentersLoadbalancersGet(String datacenterId, Boolean pretty, Integer depth, Integer xContractNumber, Integer offset, Integer limit,  String orderBy, Integer maxResults, Map<String, String> filters) throws ApiException {
        ApiResponse<Loadbalancers> localVarResp = datacentersLoadbalancersGetWithHttpInfo(datacenterId, pretty, depth, xContractNumber, offset, limit, orderBy, maxResults, filters);
        return localVarResp.getData();
    }

    /**
     * List Load Balancers
     * Retrieve a list of Load Balancers within the datacenter
     * @param datacenterId The unique ID of the datacenter (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param offset the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination) (optional, default to 0)
     * @param limit the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination) (optional, default to 1000)
     * @param orderBy - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param maxResults - Limits the number of results returned.
     * @param filters - Filters query parameters limit results to those containing a matching value for a specific property.
     * @return ApiResponse&lt;Loadbalancers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Loadbalancers> datacentersLoadbalancersGetWithHttpInfo(String datacenterId, Boolean pretty, Integer depth, Integer xContractNumber, Integer offset, Integer limit, String orderBy, Integer maxResults, Map<String, String> filters) throws ApiException {
        okhttp3.Call localVarCall = datacentersLoadbalancersGetValidateBeforeCall(datacenterId, pretty, depth, xContractNumber, offset, limit,  orderBy, maxResults, filters, null);
        Type localVarReturnType = new TypeToken<Loadbalancers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Load Balancers (asynchronously)
     * Retrieve a list of Load Balancers within the datacenter
     * @param datacenterId The unique ID of the datacenter (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param offset the first element (of the total list of elements) to include in the response (use together with &lt;code&gt;limit&lt;/code&gt; for pagination) (optional, default to 0)
     * @param limit the maximum number of elements to return (use together with &lt;code&gt;offset&lt;/code&gt; for pagination) (optional, default to 1000)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersGetAsync(String datacenterId, Boolean pretty, Integer depth, Integer xContractNumber, Integer offset, Integer limit, String orderBy, Integer maxResults, Map<String, String> filters,final ApiCallback<Loadbalancers> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersLoadbalancersGetValidateBeforeCall(datacenterId, pretty, depth, xContractNumber, offset, limit,  orderBy, maxResults, filters, callback);
        Type localVarReturnType = new TypeToken<Loadbalancers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersLoadbalancersPatch
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param loadbalancer Modified Loadbalancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersPatchCall(String datacenterId, String loadbalancerId, LoadbalancerProperties loadbalancer, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = loadbalancer;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "loadbalancerId" + "\\}", localVarApiClient.escapeString(loadbalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersLoadbalancersPatchValidateBeforeCall(String datacenterId, String loadbalancerId, LoadbalancerProperties loadbalancer, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersLoadbalancersPatch(Async)");
        }
        
        // verify the required parameter 'loadbalancerId' is set
        if (loadbalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadbalancerId' when calling datacentersLoadbalancersPatch(Async)");
        }
        
        // verify the required parameter 'loadbalancer' is set
        if (loadbalancer == null) {
            throw new ApiException("Missing the required parameter 'loadbalancer' when calling datacentersLoadbalancersPatch(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersLoadbalancersPatchCall(datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Partially modify a Loadbalancer
     * You can use update attributes of a resource
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param loadbalancer Modified Loadbalancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return Loadbalancer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public Loadbalancer datacentersLoadbalancersPatch(String datacenterId, String loadbalancerId, LoadbalancerProperties loadbalancer, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<Loadbalancer> localVarResp = datacentersLoadbalancersPatchWithHttpInfo(datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Partially modify a Loadbalancer
     * You can use update attributes of a resource
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param loadbalancer Modified Loadbalancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return ApiResponse&lt;Loadbalancer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Loadbalancer> datacentersLoadbalancersPatchWithHttpInfo(String datacenterId, String loadbalancerId, LoadbalancerProperties loadbalancer, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersLoadbalancersPatchValidateBeforeCall(datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<Loadbalancer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially modify a Loadbalancer (asynchronously)
     * You can use update attributes of a resource
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param loadbalancer Modified Loadbalancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersPatchAsync(String datacenterId, String loadbalancerId, LoadbalancerProperties loadbalancer, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Loadbalancer> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersLoadbalancersPatchValidateBeforeCall(datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<Loadbalancer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersLoadbalancersPost
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancer Loadbalancer to be created (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersPostCall(String datacenterId, Loadbalancer loadbalancer, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = loadbalancer;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/loadbalancers"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersLoadbalancersPostValidateBeforeCall(String datacenterId, Loadbalancer loadbalancer, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersLoadbalancersPost(Async)");
        }
        
        // verify the required parameter 'loadbalancer' is set
        if (loadbalancer == null) {
            throw new ApiException("Missing the required parameter 'loadbalancer' when calling datacentersLoadbalancersPost(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersLoadbalancersPostCall(datacenterId, loadbalancer, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Create a Load Balancer
     * Creates a Loadbalancer within the datacenter
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancer Loadbalancer to be created (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return Loadbalancer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public Loadbalancer datacentersLoadbalancersPost(String datacenterId, Loadbalancer loadbalancer, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<Loadbalancer> localVarResp = datacentersLoadbalancersPostWithHttpInfo(datacenterId, loadbalancer, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Create a Load Balancer
     * Creates a Loadbalancer within the datacenter
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancer Loadbalancer to be created (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return ApiResponse&lt;Loadbalancer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Loadbalancer> datacentersLoadbalancersPostWithHttpInfo(String datacenterId, Loadbalancer loadbalancer, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersLoadbalancersPostValidateBeforeCall(datacenterId, loadbalancer, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<Loadbalancer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Load Balancer (asynchronously)
     * Creates a Loadbalancer within the datacenter
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancer Loadbalancer to be created (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersPostAsync(String datacenterId, Loadbalancer loadbalancer, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Loadbalancer> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersLoadbalancersPostValidateBeforeCall(datacenterId, loadbalancer, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<Loadbalancer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersLoadbalancersPut
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param loadbalancer Modified Loadbalancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersPutCall(String datacenterId, String loadbalancerId, Loadbalancer loadbalancer, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = loadbalancer;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "loadbalancerId" + "\\}", localVarApiClient.escapeString(loadbalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersLoadbalancersPutValidateBeforeCall(String datacenterId, String loadbalancerId, Loadbalancer loadbalancer, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersLoadbalancersPut(Async)");
        }
        
        // verify the required parameter 'loadbalancerId' is set
        if (loadbalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadbalancerId' when calling datacentersLoadbalancersPut(Async)");
        }
        
        // verify the required parameter 'loadbalancer' is set
        if (loadbalancer == null) {
            throw new ApiException("Missing the required parameter 'loadbalancer' when calling datacentersLoadbalancersPut(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersLoadbalancersPutCall(datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Modify a Load Balancer
     * You can use update attributes of a resource
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param loadbalancer Modified Loadbalancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return Loadbalancer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public Loadbalancer datacentersLoadbalancersPut(String datacenterId, String loadbalancerId, Loadbalancer loadbalancer, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<Loadbalancer> localVarResp = datacentersLoadbalancersPutWithHttpInfo(datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Modify a Load Balancer
     * You can use update attributes of a resource
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param loadbalancer Modified Loadbalancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * 
     * @return ApiResponse&lt;Loadbalancer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Loadbalancer> datacentersLoadbalancersPutWithHttpInfo(String datacenterId, String loadbalancerId, Loadbalancer loadbalancer, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersLoadbalancersPutValidateBeforeCall(datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<Loadbalancer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify a Load Balancer (asynchronously)
     * You can use update attributes of a resource
     * @param datacenterId The unique ID of the datacenter (required)
     * @param loadbalancerId The unique ID of the Load Balancer (required)
     * @param loadbalancer Modified Loadbalancer (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users having more than 1 contract need to provide contract number, against which all API requests should be executed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersLoadbalancersPutAsync(String datacenterId, String loadbalancerId, Loadbalancer loadbalancer, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Loadbalancer> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersLoadbalancersPutValidateBeforeCall(datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<Loadbalancer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }
}
