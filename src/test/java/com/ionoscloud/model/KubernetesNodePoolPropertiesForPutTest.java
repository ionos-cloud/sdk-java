/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ionoscloud.model.KubernetesAutoScaling;
import com.ionoscloud.model.KubernetesMaintenanceWindow;
import com.ionoscloud.model.KubernetesNodePoolLan;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for KubernetesNodePoolPropertiesForPut
 */
public class KubernetesNodePoolPropertiesForPutTest {
    private final KubernetesNodePoolPropertiesForPut model = new KubernetesNodePoolPropertiesForPut();

    /**
     * Model tests for KubernetesNodePoolPropertiesForPut
     */
    @Test
    public void testKubernetesNodePoolPropertiesForPut() {
        // TODO: test KubernetesNodePoolPropertiesForPut
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'nodeCount'
     */
    @Test
    public void nodeCountTest() {
        // TODO: test nodeCount
    }

    /**
     * Test the property 'k8sVersion'
     */
    @Test
    public void k8sVersionTest() {
        // TODO: test k8sVersion
    }

    /**
     * Test the property 'maintenanceWindow'
     */
    @Test
    public void maintenanceWindowTest() {
        // TODO: test maintenanceWindow
    }

    /**
     * Test the property 'autoScaling'
     */
    @Test
    public void autoScalingTest() {
        // TODO: test autoScaling
    }

    /**
     * Test the property 'lans'
     */
    @Test
    public void lansTest() {
        // TODO: test lans
    }

    /**
     * Test the property 'labels'
     */
    @Test
    public void labelsTest() {
        // TODO: test labels
    }

    /**
     * Test the property 'annotations'
     */
    @Test
    public void annotationsTest() {
        // TODO: test annotations
    }

    /**
     * Test the property 'publicIps'
     */
    @Test
    public void publicIpsTest() {
        // TODO: test publicIps
    }

}
