/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiException;
import com.ionoscloud.model.Error;
import com.ionoscloud.model.Group;
import com.ionoscloud.model.GroupMembers;
import com.ionoscloud.model.GroupShare;
import com.ionoscloud.model.GroupShares;
import com.ionoscloud.model.Groups;
import com.ionoscloud.model.Resource;
import com.ionoscloud.model.ResourceGroups;
import com.ionoscloud.model.Resources;
import com.ionoscloud.model.ResourcesUsers;
import com.ionoscloud.model.S3Key;
import com.ionoscloud.model.S3Keys;
import com.ionoscloud.model.S3ObjectStorageSSO;
import com.ionoscloud.model.User;
import com.ionoscloud.model.UserPost;
import com.ionoscloud.model.UserPut;
import com.ionoscloud.model.Users;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserManagementApi
 */
@Ignore
public class UserManagementApiTest {

    private final UserManagementApi api = new UserManagementApi();

    
    /**
     * Delete a Group
     *
     * Delete a group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umGroupsDeleteTest() throws ApiException {
        String groupId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.umGroupsDelete(groupId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Group
     *
     * You can retrieve a group by using the group ID. This value can be found in the response body when a group is created or when you GET a list of groups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umGroupsFindByIdTest() throws ApiException {
        String groupId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Group response = api.umGroupsFindById(groupId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List All Groups.
     *
     * You can retrieve a complete list of all groups that you have access to
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umGroupsGetTest() throws ApiException {
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Groups response = api.umGroupsGet(pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Create a Group
     *
     * You can use this POST method to create a group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umGroupsPostTest() throws ApiException {
        Group group = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Group response = api.umGroupsPost(group, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a group
     *
     * You can use this method to update properties of the group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umGroupsPutTest() throws ApiException {
        String groupId = null;
        Group group = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Group response = api.umGroupsPut(groupId, group, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve resources assigned to a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umGroupsResourcesGetTest() throws ApiException {
        String groupId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        ResourceGroups response = api.umGroupsResourcesGet(groupId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Remove a resource from a group
     *
     * This will remove a resource from a group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umGroupsSharesDeleteTest() throws ApiException {
        String groupId = null;
        String resourceId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.umGroupsSharesDelete(groupId, resourceId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a group share
     *
     * This will retrieve the properties of a group share.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umGroupsSharesFindByResourceIdTest() throws ApiException {
        String groupId = null;
        String resourceId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        GroupShare response = api.umGroupsSharesFindByResourceId(groupId, resourceId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Group Shares 
     *
     * You can retrieve a list of all resources along with their permissions of the group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umGroupsSharesGetTest() throws ApiException {
        String groupId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        GroupShares response = api.umGroupsSharesGet(groupId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Add a resource to a group
     *
     * This will add a resource to the group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umGroupsSharesPostTest() throws ApiException {
        String groupId = null;
        String resourceId = null;
        GroupShare resource = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        GroupShare response = api.umGroupsSharesPost(groupId, resourceId, resource, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify resource permissions of a group
     *
     * You can use update resource permissions of a group. If empty body will be provided, no updates will happen, instead you will be returned the current permissions of resource in a group. In this case response code will be 200
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umGroupsSharesPutTest() throws ApiException {
        String groupId = null;
        String resourceId = null;
        GroupShare resource = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        GroupShare response = api.umGroupsSharesPut(groupId, resourceId, resource, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Remove a user from a group
     *
     * This will remove a user from a group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umGroupsUsersDeleteTest() throws ApiException {
        String groupId = null;
        String userId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.umGroupsUsersDelete(groupId, userId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Group Members 
     *
     * You can retrieve a list of users who are members of the group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umGroupsUsersGetTest() throws ApiException {
        String groupId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        GroupMembers response = api.umGroupsUsersGet(groupId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Add a user to a group
     *
     * This will attach a pre-existing user to a group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umGroupsUsersPostTest() throws ApiException {
        String groupId = null;
        User user = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        User response = api.umGroupsUsersPost(groupId, user, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a list of Resources by type.
     *
     * You can retrieve a list of resources by using the type. Allowed values are { datacenter, snapshot, image, ipblock, pcc, backupunit, k8s }. This value of resource type also be found in the response body when you GET a list of all resources.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umResourcesFindByTypeTest() throws ApiException {
        String resourceType = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Resources response = api.umResourcesFindByType(resourceType, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Resource by type.
     *
     * You can retrieve a resource by using the type and its uuid. Allowed values for types are { datacenter, snapshot, image, ipblock, pcc, backupunit, k8s }. The value of resource type can also be found in the response body when you GET a list of all resources.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umResourcesFindByTypeAndIdTest() throws ApiException {
        String resourceType = null;
        String resourceId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Resource response = api.umResourcesFindByTypeAndId(resourceType, resourceId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List All Resources.
     *
     * You can retrieve a complete list of all resources that you have access to
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umResourcesGetTest() throws ApiException {
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Resources response = api.umResourcesGet(pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Delete a User
     *
     * Delete a user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umUsersDeleteTest() throws ApiException {
        String userId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.umUsersDelete(userId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a User
     *
     * You can retrieve user details by using the users ID. This value can be found in the response body when a user is created or when you GET a list of users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umUsersFindByIdTest() throws ApiException {
        String userId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        User response = api.umUsersFindById(userId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List all Users 
     *
     * You can retrieve a complete list of users under your account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umUsersGetTest() throws ApiException {
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Users response = api.umUsersGet(pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a User&#39;s group resources
     *
     * You can retrieve group resources of user by using the users ID. This value can be found in the response body when a user is created or when you GET a list of users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umUsersGroupsGetTest() throws ApiException {
        String userId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        ResourceGroups response = api.umUsersGroupsGet(userId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a User&#39;s own resources
     *
     * You can retrieve resources owned by using the users ID. This value can be found in the response body when a user is created or when you GET a list of users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umUsersOwnsGetTest() throws ApiException {
        String userId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        ResourcesUsers response = api.umUsersOwnsGet(userId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Create a user
     *
     * You can use this POST method to create a user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umUsersPostTest() throws ApiException {
        UserPost user = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        User response = api.umUsersPost(user, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a user
     *
     * You can use update attributes of a User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umUsersPutTest() throws ApiException {
        String userId = null;
        UserPut user = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        User response = api.umUsersPut(userId, user, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Delete a S3 key
     *
     * Delete a S3 key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umUsersS3keysDeleteTest() throws ApiException {
        String userId = null;
        String keyId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.umUsersS3keysDelete(userId, keyId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve given S3 key belonging to the given User
     *
     * You can retrieve S3 key belonging to the given User. This user Id can be found in the response body when a user is created or when you GET a list of users. The key Id can be found in the response body when a S3 key is created or when you GET a list of all S3 keys of a user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umUsersS3keysFindByKeyIdTest() throws ApiException {
        String userId = null;
        String keyId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        S3Key response = api.umUsersS3keysFindByKeyId(userId, keyId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a User&#39;s S3 keys
     *
     * You can retrieve S3 keys owned by a user by using the users ID. This user Id can be found in the response body when a user is created or when you GET a list of users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umUsersS3keysGetTest() throws ApiException {
        String userId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        S3Keys response = api.umUsersS3keysGet(userId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Create a S3 key for the given user
     *
     * Creates a S3 key for the given user. This user Id can be found in the response body when a user is created or when you GET a list of users. Maximum of 5 keys can be generated for a given user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umUsersS3keysPostTest() throws ApiException {
        String userId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        S3Key response = api.umUsersS3keysPost(userId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a S3 key having the given key id
     *
     * You can enable or disable a given S3 key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umUsersS3keysPutTest() throws ApiException {
        String userId = null;
        String keyId = null;
        S3Key s3Key = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        S3Key response = api.umUsersS3keysPut(userId, keyId, s3Key, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve S3 object storage single signon URL for the given user
     *
     * You can retrieve S3 object storage single signon URL for the given user. This user Id can be found in the response body when a user is created or when you GET a list of users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void umUsersS3ssourlGetTest() throws ApiException {
        String userId = null;
        Boolean pretty = null;
        Integer xContractNumber = null;
        S3ObjectStorageSSO response = api.umUsersS3ssourlGet(userId, pretty, xContractNumber);

        // TODO: test validations
    }
    
}
